## Serverless configuration
##
## Defines...
## 1) Functions - deployable task (e.g. AWS Lamda function)
## 2) Events - triggers Functions (e.g. S3 bucket upload)
## 3) Resources - used by Functions (e.g. AWS S3)
##
## Every serverless.yml translates to a single AWS CloudFormation template.
## A CloudFormation stack is created from that resulting CloudFormation template.
##
## This configuration creates:
## 1) Input S3 bucket (for uploaded images)
## 2) Output S3 bucket (for processes images)
## 3) Image processing Lamda function
##
## The Lamda function is invoked whenever a object (image) is added to the
## input S3 bucket. This image is processed and stored in the output S3 bucket.

service:
    name: serverless-image-processor
  
# Add the serverless-webpack plugin
plugins:
  #- serverless-webpack
  - serverless-s3-remover

custom:
  inputBucketName: serverless-image-uploads
  outputBucketName: serverless-image-processed
  # Empties buckets before attempting to delete them
  remover:
      buckets:
        - ${self:custom.inputBucketName}
        - ${self:custom.outputBucketName}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    PROCESSED_BUCKET: ${self:custom.outputBucketName}
  tags:
    Project: Serverless Image Processor
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - 'arn:aws:s3:::${self:custom.inputBucketName}/*'
        - 'arn:aws:s3:::${self:custom.outputBucketName}/*'

# Create function that is triggered by creating objects in our upload images bucket.
# Upload images bucket will also be created.
functions:
  imageTransform:
    handler: handler.imageTransform
    name: ${self:provider.stage}-serverless-image-processor
    description: image processor lambda
    memorySize: 512
    timeout: 30
    provisionedConcurrency: 5
    reservedConcurrency: 50
    events:
      - s3:
          bucket: ${self:custom.inputBucketName}
          event: s3:ObjectCreated:*

# Create our processed images bucket
resources:
  Resources:
    S3BucketProcessedImages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.outputBucketName}
        # add additional custom bucket configuration here
    # ResizeLambdaPermissionPhotosS3:
    #   Type: 'AWS::Lambda::Permission'
    #   Properties:
    #     FunctionName:
    #       'Fn::GetAtt':
    #         - ResizeLambdaFunction
    #         - Arn
    #     Principal: 's3.amazonaws.com'
    #     Action: 'lambda:InvokeFunction'
    #     SourceAccount:
    #       Ref: AWS::AccountId
    #     SourceArn: 'arn:aws:s3:::my-custom-bucket-name'

# resources:
#   Resources:
#     processedImagesBacket:
#       Type: S3::Bucket
#       Properties:
#         RetentionInDays: '30'

# custom:
#   # Empties buckets before attempting to delete them
#   remover:
#       buckets:
#         - serverless-image-uploads
  # webpack:
  #     includeModules: true

# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

#service: myService

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# provider:
#   name: aws
#   runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"